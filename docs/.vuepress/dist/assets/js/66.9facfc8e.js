(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{383:function(_,v,t){"use strict";t.r(v);var l=t(6),a=Object(l.a)({},(function(){var _=this,v=_._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("h2",{attrs:{id:"一、七大原则"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#一、七大原则"}},[_._v("#")]),_._v(" 一、七大原则")]),_._v(" "),v("p",[v("a",{attrs:{href:"https://www.cnblogs.com/coder306/p/13087594.html",target:"_blank",rel:"noopener noreferrer"}},[_._v("设计模式的7大原则介绍"),v("OutboundLink")],1)]),_._v(" "),v("ol",[v("li",[_._v("单一职责原则")]),_._v(" "),v("li",[_._v("接口隔离原则")]),_._v(" "),v("li",[_._v("依赖倒置原则")]),_._v(" "),v("li",[_._v("里氏替换原则")]),_._v(" "),v("li",[_._v("开闭原则")]),_._v(" "),v("li",[_._v("迪米特原则")]),_._v(" "),v("li",[_._v("合成复用原则")])]),_._v(" "),v("h2",{attrs:{id:"二、类之间的关系"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#二、类之间的关系"}},[_._v("#")]),_._v(" 二、类之间的关系")]),_._v(" "),v("ol",[v("li",[_._v("依赖")]),_._v(" "),v("li",[_._v("泛化（继承）")]),_._v(" "),v("li",[_._v("实现")]),_._v(" "),v("li",[_._v("关联")]),_._v(" "),v("li",[_._v("聚合")]),_._v(" "),v("li",[_._v("组合")])]),_._v(" "),v("h2",{attrs:{id:"三、设计模式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#三、设计模式"}},[_._v("#")]),_._v(" 三、设计模式")]),_._v(" "),v("h3",{attrs:{id:"_3-1-创建型【5种】"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-创建型【5种】"}},[_._v("#")]),_._v(" 3.1 创建型【5种】")]),_._v(" "),v("p",[_._v('类创建模式的主要关注点是"怎样创建对象？"，它的主要特点是"将对象的创建与使用分离"。')]),_._v(" "),v("p",[_._v("这样可以降低系统的耦合度使用者不需要关注对象的创建细节，对象的创建由相关的工厂来完成。")]),_._v(" "),v("ul",[v("li",[_._v("*工厂模式")]),_._v(" "),v("li",[_._v("*抽象工厂模式")]),_._v(" "),v("li",[_._v("*单例模式")]),_._v(" "),v("li",[_._v("建造者模式")]),_._v(" "),v("li",[_._v("*原型模式")])]),_._v(" "),v("p",[_._v("以上几种创建型模式，除了工厂方法模式属于类创建型模式，其他的全部属于对象创建型模式。")]),_._v(" "),v("h3",{attrs:{id:"_3-2-结构型【7种】"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-结构型【7种】"}},[_._v("#")]),_._v(" 3.2 结构型【7种】")]),_._v(" "),v("p",[_._v("结构型模式描述如何将类或对象按某种布局组成更大的结构。")]),_._v(" "),v("p",[_._v("它分为类结构型模式和对象结构型模式，前者采用继承机制来组织接口和类，后者采用组合或聚合来组合对象。")]),_._v(" "),v("p",[_._v('由于组合关系或聚合关系比继承关系耦合度低，满足"合成复用原则"，所以对象结构型模式具有更大的灵活性。')]),_._v(" "),v("ul",[v("li",[_._v("*适配器模式")]),_._v(" "),v("li",[_._v("桥接模式")]),_._v(" "),v("li",[_._v("组合模式")]),_._v(" "),v("li",[_._v("*装饰器模式")]),_._v(" "),v("li",[_._v("外观模式")]),_._v(" "),v("li",[_._v("享元模式")]),_._v(" "),v("li",[_._v("*代理模式")])]),_._v(" "),v("p",[_._v("以上几种结构型模式，除了适配器模式分为类结构型模式和对象结构型模式两种，其他的全部属于对象结构型模式。")]),_._v(" "),v("h3",{attrs:{id:"_3-3-行为型【11种】"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-行为型【11种】"}},[_._v("#")]),_._v(" 3.3 行为型【11种】")]),_._v(" "),v("p",[_._v("行为型模式分为类行为模式和对象行为模式，前者采用继承机制来在类间分派行为，后者采用组合或聚合在对象间分配行为。")]),_._v(" "),v("p",[_._v('由于组合关系或聚合关系比继承关系耦合度低，满足"合成复用原则"，所以对象行为模式比类行为模式具有更大的灵活性。')]),_._v(" "),v("ul",[v("li",[_._v("责任链模式")]),_._v(" "),v("li",[_._v("命令模式")]),_._v(" "),v("li",[_._v("解释器模式")]),_._v(" "),v("li",[_._v("*迭代器模式")]),_._v(" "),v("li",[_._v("*中介者模式")]),_._v(" "),v("li",[_._v("备忘录模式")]),_._v(" "),v("li",[_._v("*观察者模式")]),_._v(" "),v("li",[_._v("状态模式")]),_._v(" "),v("li",[_._v("*策略模式")]),_._v(" "),v("li",[_._v("模板模式")]),_._v(" "),v("li",[_._v("访问者模式")])]),_._v(" "),v("p",[_._v("以上几种行为型模式，除了模板方法模式和解释器模式是类行为型模式，其他的全部属于对象行为型模式。")]),_._v(" "),v("h3",{attrs:{id:"_3-4-j2ee模式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-j2ee模式"}},[_._v("#")]),_._v(" 3.4 J2EE模式")]),_._v(" "),v("p",[_._v("这些设计模式特别关注表示层。")]),_._v(" "),v("ul",[v("li",[_._v("MVC模式")]),_._v(" "),v("li",[_._v("业务代表模式")]),_._v(" "),v("li",[_._v("组合实体模式")]),_._v(" "),v("li",[_._v("数据访问对象模式")]),_._v(" "),v("li",[_._v("前端控制器模式")]),_._v(" "),v("li",[_._v("拦截过滤器模式")]),_._v(" "),v("li",[_._v("服务定位器模式")]),_._v(" "),v("li",[_._v("传输对象模式")])]),_._v(" "),v("h3",{attrs:{id:"四、接口、抽象类"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#四、接口、抽象类"}},[_._v("#")]),_._v(" 四、接口、抽象类")]),_._v(" "),v("p",[_._v("首先接口和抽象类的设计目的就是不一样的。**接口是对动作的抽象，而抽象类是对根源的抽象。**对于抽象类，")]),_._v(" "),v("p",[_._v("比如男人，女人这两个类，那我们可以为这两个类设计一个更高级别的抽象类--人。")]),_._v(" "),v("p",[_._v("对于接口，我们可以坐着吃饭，可以站着吃饭，可以用筷子吃饭，可以用叉子吃饭，甚至可以学三哥一样用手抓着吃饭，那么可以把这些吃饭抽象成一个接口--吃饭。")]),_._v(" "),v("p",[_._v("所以在高级语言中（如Java， C#），一个类只能继承一个抽象类（因为你不可能同时是生物又是非生物）。")]),_._v(" "),v("p",[_._v("但是一个类可以同时实现多个接口，比如开车接口，踢足球接口，游泳接口。")]),_._v(" "),v("blockquote",[v("p",[_._v("参考文档："),v("a",{attrs:{href:"https://www.zhihu.com/question/20149818",target:"_blank",rel:"noopener noreferrer"}},[_._v("接口和抽象类有什么区别？"),v("OutboundLink")],1)])])])}),[],!1,null,null,null);v.default=a.exports}}]);