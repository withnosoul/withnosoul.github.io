(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{331:function(t,v,a){t.exports=a.p+"assets/img/20180511153228230.ce3b8b78.jpg"},388:function(t,v,a){"use strict";a.r(v);var _=a(6),e=Object(_.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h2",{attrs:{id:"springboot日志"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#springboot日志"}},[t._v("#")]),t._v(" SpringBoot日志")]),t._v(" "),v("ol",[v("li",[t._v("日志级别")])]),t._v(" "),v("div",{staticClass:"language- line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("trace < debug < info < warn < error < fatal\n")])]),t._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[t._v("1")]),v("br")])]),v("ol",{attrs:{start:"2"}},[v("li",[t._v("配置")])]),t._v(" "),v("div",{staticClass:"language-yaml line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-yaml"}},[v("code",[v("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("logging")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n  "),v("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("level")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n    "),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 项目的groupId")]),t._v("\n    "),v("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("com.xxx.xx")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" debug\n")])]),t._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[t._v("1")]),v("br"),v("span",{staticClass:"line-number"},[t._v("2")]),v("br"),v("span",{staticClass:"line-number"},[t._v("3")]),v("br"),v("span",{staticClass:"line-number"},[t._v("4")]),v("br")])]),v("h2",{attrs:{id:"servlet、filter、listener和interceptor"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#servlet、filter、listener和interceptor"}},[t._v("#")]),t._v(" Servlet、Filter、Listener和Interceptor")]),t._v(" "),v("p",[t._v("servlet")]),t._v(" "),v("p",[t._v("servlet是一种运行服务器端的java应用程序，具有独立于平台和协议的特性，并且可以动态的生成web页面，\n它工作在客户端请求与服务器响应的中间层。")]),t._v(" "),v("p",[t._v("filter")]),t._v(" "),v("p",[t._v("filter是一个可以复用的代码片段，可以用来转换http请求、响应和头信息。filter不像servlet，\n它不能产生一个请求或者响应，它只是修改对某一资源的请求，或者修改从某一的响应。")]),t._v(" "),v("p",[t._v("通俗的语言说就是在application，session，request三个对象创建消亡或者往其中添加修改删除属性时自动执行代码的功能组件。")]),t._v(" "),v("p",[t._v("listener")]),t._v(" "),v("p",[t._v("监听器，从字面上可以看出listener主要用来监听只用。通过listener可以监听web服务器中某一个执行动作，\n并根据其要求作出相应的响应。")]),t._v(" "),v("p",[t._v("interceptor")]),t._v(" "),v("p",[t._v("是在面向切面编程的，就是在你的service或者一个方法前调用一个方法，或者在方法后调用一个方法。")]),t._v(" "),v("div",{staticClass:"center-container"},[v("p",[v("img",{attrs:{src:a(331),alt:"img"}})])]),v("h2",{attrs:{id:"缓存穿透、击穿和雪崩"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#缓存穿透、击穿和雪崩"}},[t._v("#")]),t._v(" 缓存穿透、击穿和雪崩")]),t._v(" "),v("p",[t._v("穿透")]),t._v(" "),v("p",[t._v("描述：缓存穿透是指缓存和数据库中都没有的数据，而用户不断发起请求，如发起id不存在的数据。这时的用户很可能是攻击者，攻击会导致数据库压力过大。")]),t._v(" "),v("p",[t._v("解决方案：")]),t._v(" "),v("ol",[v("li",[t._v("接口层增加校验，如用户鉴权校验，id做基础校验，id<=0的直接拦截；")]),t._v(" "),v("li",[t._v("从缓存取不到的数据，在数据库中也没有找到，这时也可以将key-value对写为key-null，缓存有效时间可以设置短点，如30秒（设置太长会导致正常情况无法使用）。这样可以防止攻击用户反复用同一个id暴力攻击。")])]),t._v(" "),v("p",[t._v("击穿")]),t._v(" "),v("p",[t._v("描述：缓存击穿是指缓存中没有但数据库中有的数据（一般是缓存时间到期），这时用于并发用户特别多，")]),t._v(" "),v("p",[t._v("同时读缓存没督导数据，又同时去数据库去取数据，引起数据库压力瞬间增大，造成过大压力")]),t._v(" "),v("p",[t._v("解决方案：")]),t._v(" "),v("ol",[v("li",[t._v("设置热点数据永不过期")]),t._v(" "),v("li",[t._v("加互斥锁，")]),t._v(" "),v("li",[t._v("雪崩")])]),t._v(" "),v("p",[t._v("描述：缓存雪崩是指缓存中数据大批量到过期时间，而查询数据量巨大，引起数据库压力过大甚至down机。")]),t._v(" "),v("p",[t._v("和缓存击穿不同的是，缓存击穿指并发查同一条数据，缓存雪崩式不同数据都过期了，很多数据库都查不到从而查数据库。")]),t._v(" "),v("p",[t._v("解决方案：")]),t._v(" "),v("ol",[v("li",[t._v("缓存数据的过期时间设置随机，防止同一时间大量数据过期现象发生。")]),t._v(" "),v("li",[t._v("如果缓存数据是分布式部署，将热点数据均匀分布到不同缓存数据库中。")]),t._v(" "),v("li",[t._v("设置热点数据永不过期。")])]),t._v(" "),v("h2",{attrs:{id:"jsr303-校验规则"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#jsr303-校验规则"}},[t._v("#")]),t._v(" JSR303 校验规则")]),t._v(" "),v("p",[v("strong",[t._v("空检查")])]),t._v(" "),v("ul",[v("li",[t._v("@Null 验证对象是否为null")]),t._v(" "),v("li",[t._v("@NotNull 验证对象是否不为null, 无法检查长度为0的字符串")]),t._v(" "),v("li",[t._v("@NotBlank 检查约束字符串是不是Null，还有被trim的长度是否大于0，只对字符串，且会去掉前后空格")]),t._v(" "),v("li",[t._v("@NotEmpty 检查约束元素是否为Null，或者是EMPTY")])]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("区别")]),t._v(" "),v("ul",[v("li",[t._v("@NotNull // CharSequence, Collection, Map 和 Array 对象不能是 null, 但可以是空集（size = 0）。")]),t._v(" "),v("li",[t._v("@NotEmpty // CharSequence, Collection, Map 和 Array 对象不能是 null 并且相关对象的 size 大于 0。")]),t._v(" "),v("li",[t._v("@NotBlank // String 不是 null 且去除两端空白字符后的长度（trim length）大于 0。")])])]),t._v(" "),v("p",[v("strong",[t._v("Boolean检查")])]),t._v(" "),v("ul",[v("li",[t._v("@AssertTrue 验证 Boolean 对象是否为 true")]),t._v(" "),v("li",[t._v("@AssertFalse 验证 Boolean 对象是否为 false")])]),t._v(" "),v("p",[v("strong",[t._v("长度检查")])]),t._v(" "),v("ul",[v("li",[t._v("@Size(min=, max=) 验证对象（Array,Collection,Map,String）长度是否在给定的范围之内")]),t._v(" "),v("li",[t._v("@Length(min=, max=) Validates that the annotated string is between min and max included.")])]),t._v(" "),v("p",[v("strong",[t._v("日期检查")])]),t._v(" "),v("ul",[v("li",[t._v("@Past 验证 Date 和 Calendar 对象是否在当前时间之前，验证成立的话被注释的元素一定是一个过去的日期")]),t._v(" "),v("li",[t._v("@Future 验证 Date 和 Calendar 对象是否在当前时间之后 ，验证成立的话被注释的元素一定是一个将来的日期")]),t._v(" "),v("li",[t._v("@Pattern 验证 String 对象是否符合正则表达式的规则，被注释的元素符合制定的正则表达式，regexp:正则表达式 flags: 指定 Pattern.Flag 的数组，表示正则表达式的相关选项。")])]),t._v(" "),v("p",[v("strong",[t._v("数值检查")])]),t._v(" "),v("p",[t._v('建议使用在String,Integer类型，不建议使用在int类型上，因为表单值为“”时无法转换为int，但可以转换为String为"",Integer为null。')]),t._v(" "),v("ul",[v("li",[t._v("@Min 验证 Number 和 String 对象是否大等于指定的值")]),t._v(" "),v("li",[t._v("@Max 验证 Number 和 String 对象是否小等于指定的值")]),t._v(" "),v("li",[t._v("@DecimalMax 被标注的值必须不大于约束中指定的最大值. 这个约束的参数是一个通过BigDecimal定义的最大值的字符串表示.小数存在精度")]),t._v(" "),v("li",[t._v("@DecimalMin 被标注的值必须不小于约束中指定的最小值. 这个约束的参数是一个通过BigDecimal定义的最小值的字符串表示.小数存在精度")]),t._v(" "),v("li",[t._v("@Digits 验证 Number 和 String 的构成是否合法")]),t._v(" "),v("li",[t._v("@Digits(integer=,fraction=) 验证字符串是否是符合指定格式的数字，integer指定整数精度，fraction指定小数精度。")]),t._v(" "),v("li",[t._v("@Range(min=, max=) 被指定的元素必须在合适的范围内")]),t._v(" "),v("li",[t._v("@Range(min=10000,max=50000,message=”range.bean.wage”)")]),t._v(" "),v("li",[t._v("@Valid 递归的对关联对象进行校验, 如果关联对象是个集合或者数组,那么对其中的元素进行递归校验,如果是一个map,则对其中的值部分进行校验.(是否进行递归验证)")]),t._v(" "),v("li",[t._v("@CreditCardNumber信用卡验证")]),t._v(" "),v("li",[t._v("@Email 验证是否是邮件地址，如果为null,不进行验证，算通过验证。")]),t._v(" "),v("li",[t._v("@ScriptAssert(lang= ,script=, alias=)")]),t._v(" "),v("li",[t._v("@URL(protocol=,host=, port=,regexp=, flags=)")])]),t._v(" "),v("h2",{attrs:{id:"锁"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#锁"}},[t._v("#")]),t._v(" 锁")]),t._v(" "),v("p",[t._v("synchronized 和 Lock")]),t._v(" "),v("blockquote",[v("p",[t._v("Java中有两种加锁方式：一种是用synchronized关键字，另一种是用Lock接口的实现类。")])]),t._v(" "),v("h3",{attrs:{id:"悲观锁、乐观锁"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#悲观锁、乐观锁"}},[t._v("#")]),t._v(" 悲观锁、乐观锁")]),t._v(" "),v("p",[t._v("悲观锁与乐观锁并不是特指某个锁，而是在并发情况下的两种不同策略。")]),t._v(" "),v("p",[t._v("悲观锁： 就是很悲观，每次去拿数据都认为别人会修改。所以每次在拿数据的时候都会上锁。这样别人想拿数据就被挡住，知道悲观锁被释放。")]),t._v(" "),v("p",[t._v("乐观锁： 就是很乐观，每次去拿数据的时候都认为别人会修改。所以不会上锁！但是如果想要更新数据，则会在更新前检查在读取至更新这段时间别人有没有修改过这个数据。如果修改过，则虫棍读取，再次尝试更新，循环上述步骤直到更新成功。")]),t._v(" "),v("p",[t._v("悲观锁阻塞事务，乐观锁回滚重试。")]),t._v(" "),v("h3",{attrs:{id:"自旋锁"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#自旋锁"}},[t._v("#")]),t._v(" 自旋锁")]),t._v(" "),v("p",[t._v("所谓自旋，说白了就是一个while(true)无限循环。")]),t._v(" "),v("h3",{attrs:{id:"偏向锁-轻量级锁-重量级锁"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#偏向锁-轻量级锁-重量级锁"}},[t._v("#")]),t._v(" 偏向锁 -> 轻量级锁 -> 重量级锁")]),t._v(" "),v("h3",{attrs:{id:"可重入锁-递归锁"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#可重入锁-递归锁"}},[t._v("#")]),t._v(" 可重入锁（递归锁）")]),t._v(" "),v("p",[t._v("可重入锁的字面意思是“可以重新进入的锁”，即允许同一个线程多次获取同一把锁。")]),t._v(" "),v("p",[t._v("比如一个递归函数理由加锁操作，递归过程中这个锁会阻塞自己吗？如果不会，那么这个锁就是可重入锁（因为这个原因可重入锁也叫做递归锁）。")]),t._v(" "),v("h3",{attrs:{id:"公平锁、非公平锁"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#公平锁、非公平锁"}},[t._v("#")]),t._v(" 公平锁、非公平锁")]),t._v(" "),v("h3",{attrs:{id:"可中断锁"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#可中断锁"}},[t._v("#")]),t._v(" 可中断锁")]),t._v(" "),v("h3",{attrs:{id:"读写锁、共享锁、互斥锁"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#读写锁、共享锁、互斥锁"}},[t._v("#")]),t._v(" 读写锁、共享锁、互斥锁")]),t._v(" "),v("p",[t._v("读写锁其实是一对锁，一个读锁（共享锁）和一个写锁（互斥锁、排他锁）。")]),t._v(" "),v("h2",{attrs:{id:"事务-transactional"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#事务-transactional"}},[t._v("#")]),t._v(" 事务 transactional")]),t._v(" "),v("h3",{attrs:{id:"数据库事务特性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#数据库事务特性"}},[t._v("#")]),t._v(" 数据库事务特性")]),t._v(" "),v("p",[t._v("原子性（Atomicity）、一致性（Consistency）、隔离性或独立性（Isolation）和持久性（Durability）。")]),t._v(" "),v("h3",{attrs:{id:"事务的隔离级别-事务并发能力"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#事务的隔离级别-事务并发能力"}},[t._v("#")]),t._v(" 事务的隔离级别（事务并发能力）")]),t._v(" "),v("ul",[v("li",[t._v("READ_UNCOMMITED（读未提交）")]),t._v(" "),v("li",[t._v("读已提交")]),t._v(" "),v("li",[t._v("可重复读")]),t._v(" "),v("li",[t._v("序列化")])]),t._v(" "),v("h3",{attrs:{id:"传播行为"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#传播行为"}},[t._v("#")]),t._v(" 传播行为")]),t._v(" "),v("p",[t._v("PROPAGATION_REQUIRED")]),t._v(" "),v("p",[t._v("如果当前没有事务，就创建一个事务；如果当前存在事务，就加入该事务；该设置是最常用的设置。")]),t._v(" "),v("p",[t._v("PROPAGATION_SUPPORT")]),t._v(" "),v("p",[t._v("支持当前事务，如果当前存在事务，就加入该事务，如果当前不存在事务，就以非事务执行。")]),t._v(" "),v("p",[t._v("PROPAGATION_MANDATORY")]),t._v(" "),v("p",[t._v("支持当前事务，如果当前存在事务，就加入该事务，如果当前不存在事务，就抛出异常。")]),t._v(" "),v("p",[t._v("PROPAGATION_REQUIRED_NEW")]),t._v(" "),v("p",[t._v("创建新事务，无论当前存不存在事务，都创建新事务。")]),t._v(" "),v("p",[t._v("PROPAGATION_NOT_SUPPORTED")]),t._v(" "),v("p",[t._v("以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。")]),t._v(" "),v("p",[t._v("PROPAGATION_NEVER")]),t._v(" "),v("p",[t._v("以非事务方式执行，如果当前存在事务，则抛出异常。")]),t._v(" "),v("p",[t._v("PROPAGATION_NESTED")]),t._v(" "),v("p",[t._v("如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与PROPAGATION_REQUIRED类似的操作。")]),t._v(" "),v("p",[t._v("本地事务的坑")]),t._v(" "),v("p",[t._v("在同一个类里面，编写两个方法，内部调用的时候，会导致事务设置失效。原因是没有用到代理对象的缘故。")]),t._v(" "),v("p",[t._v("一致性：强一致性、弱一致性和最终一致性。")]),t._v(" "),v("p",[t._v("分布式事务几种常见的解决方案：")]),t._v(" "),v("ul",[v("li",[t._v("2PC")]),t._v(" "),v("li",[t._v("柔性事务 - TCC事务补偿方案")]),t._v(" "),v("li",[t._v("柔性事务 - 最大努力通知方案")]),t._v(" "),v("li",[t._v("柔性事务 - 可靠消息 + 最终一致性方案（异步确保型）")])])])}),[],!1,null,null,null);v.default=e.exports}}]);