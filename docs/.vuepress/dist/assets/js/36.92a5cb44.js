(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{361:function(e,t,r){"use strict";r.r(t);var s=r(6),a=Object(s.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"web-socket"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#web-socket"}},[e._v("#")]),e._v(" Web Socket")]),e._v(" "),t("p",[e._v("Web Socket是基于TCP协议的一个全双工通信协议，HTML5的新特性。")]),e._v(" "),t("p",[e._v("先了解以下之前通信协议的弊端。以前，在客户端和浏览器之间通信时，只能是客户端发请求之后，服务器才有所应答。\n如果服务器有新数据的话，不能够主动地发送给客户端，只能是客户端进行：")]),e._v(" "),t("ul",[t("li",[e._v("轮询：客户端不断发新请求给服务器，服务器应答一次之后就断开连接，这就需要不断发起新请求，新连接，造成资源的浪费；")]),e._v(" "),t("li",[e._v("长轮询：客户端发送请求后，就挂在那里，等到服务器有新数据之后，返回新数据，连接关闭。弊端在于服务器需要hold住连接，造成资源浪费，并且客户端收到资源后需要发送新请求。")])]),e._v(" "),t("p",[e._v("而Web Socket的好处就是在于服务器可以主动发送资源给客户端，而且只需要一次连接就会是持久连接（这样资源消耗就会少一些）。\n有了Web Socket连接，服务器可以源源不断地发送数据给客户端吗，且不需要每次发送数据都进行验证连接信息。具体的实现方法为：")]),e._v(" "),t("p",[e._v("1、客户端在首次发送请求时需要这么写报文：")]),e._v(" "),t("div",{staticClass:"language-text line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("GET / HTTP/1.1\n// Upgrade: websocket\nConnection: Upgrade\nSec-WebSocket-Protocol: chat, superchat\nHost: example.com\nOrigin: http://example.com\nSec-WebSocket-Key: sN9cRrP/n9NdMgdcy2VJFQ==\nSec-WebSocket-Version: 13\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br")])]),t("p",[e._v("重点在于需要添加上面的粗体内容，Upgrade告诉服务器你想要创建一个websocket连接，\n然后Sec-WebSocket-Key中的一串字符串会发送到服务器端，服务器接收到之后，如果它支持WebSocket连接，\n那么它就会对其加上特殊字符串之后，进行编码，放入Sec-WebSocket-Accept中返回，\n代表自己是支持Web Socket的。而Sec-WebSocket-Protocol代表客户端希望采用的Web Socket协议，\nSec-WebSocket-Version代表客户端采用的Web Socket版本号。")]),e._v(" "),t("p",[e._v("2、服务器端返回的报文如下：")]),e._v(" "),t("div",{staticClass:"language-text line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("HTTP/1.1 101 Switching Protocols\nUpgrade: websocket\nConnection:Upgrade\nSec-WebSocket-Accept: HSmrc0sMlYUkAGmm5OPpG2HaGWk=\nSec-WebSocket-Protocol: chat\nSec-WebSocket-Location: ws://example.com/\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br")])]),t("h2",{attrs:{id:"web-worker"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#web-worker"}},[e._v("#")]),e._v(" Web Worker")]),e._v(" "),t("p",[e._v("Web Worker的作用：就是为JavaScript创造多线程环境，允许主线程创建Worker线程，将一些任务分配给后者运行。")]),e._v(" "),t("p",[e._v("在主线程运行的同时，Worker线程在后台运行，两个互不干扰。等到Worker线程完成计算任务，再把结果返回给主线程。")]),e._v(" "),t("p",[e._v("这样的好处使，一些计算密集型或高延迟的任务，被Worker线程负担了，主线程（通常负责UI交互）就会很流畅，\n不会被阻塞或拖慢。 Worker线程一旦新建成功，就会始终运行，不会被主线程上的活动（比如用户点击按钮、提交表单）打断。\n这样有利于随时响应主线程的通信。但是，这也造成了Worker比较耗费资源、不应该过度使用，而且一旦使用完毕，就应该关闭。")]),e._v(" "),t("h2",{attrs:{id:"service-worker"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#service-worker"}},[e._v("#")]),e._v(" Service Worker")]),e._v(" "),t("ul",[t("li",[e._v("Service Worker实际上是浏览器和服务器之间的代理服务器，它最大的特点是在页面中注册并安装成功，运行于浏览器后台，不受页面刷新的影响，可以监听和拦截作用域范围内所有页面的HTTP请求。")]),e._v(" "),t("li",[e._v("Service Worker的目的在于离线缓存，转发请求和网络代理。它有自己的生命周期。")])]),e._v(" "),t("h2",{attrs:{id:"参考文档"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考文档"}},[e._v("#")]),e._v(" 参考文档")]),e._v(" "),t("ol",[t("li",[t("a",{attrs:{href:"https://blog.csdn.net/abccheng/article/details/50542873",target:"_blank",rel:"noopener noreferrer"}},[e._v("HTTP 文件上传过程"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=a.exports}}]);