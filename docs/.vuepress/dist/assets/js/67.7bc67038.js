(window.webpackJsonp=window.webpackJsonp||[]).push([[67],{393:function(_,v,a){"use strict";a.r(v);var t=a(6),s=Object(t.a)({},(function(){var _=this,v=_._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("p",[_._v("数据结构 + 算法，就可以得出我们想要的结果。")]),_._v(" "),v("p",[_._v("算法使得数据结构富有特性，方便人们使用，简化了数据储存、操纵的过程。")]),_._v(" "),v("p",[_._v("力扣（LeetCode）算法练习网站")]),_._v(" "),v("h2",{attrs:{id:"一、算法分类"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#一、算法分类"}},[_._v("#")]),_._v(" 一、算法分类")]),_._v(" "),v("h3",{attrs:{id:"_1-1-广度遍历搜索-bfs"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-广度遍历搜索-bfs"}},[_._v("#")]),_._v(" 1.1 广度遍历搜索（BFS）")]),_._v(" "),v("p",[_._v("BFS：广度优先搜索是一种优先遍历或搜索数据结构（如树或图）的算法，也可以在更抽象的场景中使用；")]),_._v(" "),v("p",[_._v("特点：越是接近根节点的节点将越早地遍历。")]),_._v(" "),v("h3",{attrs:{id:"_1-2-深度遍历搜索-dfs"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-深度遍历搜索-dfs"}},[_._v("#")]),_._v(" 1.2 深度遍历搜索（DFS）")]),_._v(" "),v("p",[_._v("DFS：深度优先搜索和广度优先搜索一样，深度优先搜索也是用于在树/图中遍历或搜索的一种重要算法；")]),_._v(" "),v("p",[_._v("特点：更早访问的节点可能不是更接近根节点的节点。")]),_._v(" "),v("h3",{attrs:{id:"_1-3-递归-rec"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-递归-rec"}},[_._v("#")]),_._v(" 1.3 递归（REC）")]),_._v(" "),v("p",[_._v("递归：递归是一种解决问题的有效方法，在递归的过程中，函数将自身作为子例程调用；")]),_._v(" "),v("p",[_._v("注意点：为了确保递归函数不会导致无限循环，它应具有以下属性：")]),_._v(" "),v("p",[_._v("一个简单的基本案例 —— 能够不使用递归来产生答案的终止方案；\n一组规则，也称作递推关系，可将所有其它情况拆分到基本案例；\n问题：重复计算")]),_._v(" "),v("p",[_._v("一些问题使用递归考虑，思路是非常清晰的，但是却不推荐使用递归，例如下面的几个问题：")]),_._v(" "),v("ul",[v("li",[_._v("斐波那契数列")]),_._v(" "),v("li",[_._v("跳台阶")]),_._v(" "),v("li",[_._v("矩形覆盖")])]),_._v(" "),v("p",[_._v("这几个问题使用递归都有一个共同的缺点，那就是包含大量的重复计算，如果递归层次比较深的话，直接会导致JS进程崩溃。")]),_._v(" "),v("h3",{attrs:{id:"_1-4-分治法-dc"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-分治法-dc"}},[_._v("#")]),_._v(" 1.4 分治法（DC）")]),_._v(" "),v("p",[_._v("分治法：分治法将问题分成一些小的问题然后递归求解，而治的阶段则将分的阶段得到的各答案“修补”在一起，即分而治之；")]),_._v(" "),v("p",[_._v("个人理解：分治法与递归思想有很多相似之处。")]),_._v(" "),v("h3",{attrs:{id:"_1-5-回溯法-fb"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-回溯法-fb"}},[_._v("#")]),_._v(" 1.5 回溯法（FB）")]),_._v(" "),v("p",[_._v("回溯法：从解决问题每一步的所有可能选项里系统选择出一个可行的解决方案；")]),_._v(" "),v("p",[_._v("在某一步选择一个选项后，进入下一步，然后面临新的选项。重新选择，直至达到最终状态。")]),_._v(" "),v("h3",{attrs:{id:"_1-6-动态规划-dp"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-动态规划-dp"}},[_._v("#")]),_._v(" 1.6 动态规划（DP）")]),_._v(" "),v("p",[_._v("动态规划：动态规划往往是最能有效考察算法和设计能力的题目类型，面对这类题目最重要的是抓住问题的阶段，了解每个阶段的状态，从而分析阶段之间的关系转化。")]),_._v(" "),v("p",[_._v("适用于动态规划的问题，需要满足最优子结构和无后效性，动态规划的求解过程，在于找到状态转移方程，进行自底向上的求解。")]),_._v(" "),v("p",[_._v("常见的适用动态规划的题目：")]),_._v(" "),v("ul",[v("li",[_._v("斐波那契数列")]),_._v(" "),v("li",[_._v("最小路径和")]),_._v(" "),v("li",[_._v("打家劫舍")])]),_._v(" "),v("h3",{attrs:{id:"_1-7-贪心算法-ga"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-7-贪心算法-ga"}},[_._v("#")]),_._v(" 1.7 贪心算法（GA）")]),_._v(" "),v("p",[_._v("贪心算法： 对问题求解的时候，总是做出在当前看来是最好的做法；")]),_._v(" "),v("p",[_._v("适用贪心算法的场景：问题能够分解成子问题来解决，子问题的最优解能递推到最终问题的最优解。这种子问题最优解成为最优子结构")]),_._v(" "),v("h2",{attrs:{id:"二、具体功能"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#二、具体功能"}},[_._v("#")]),_._v(" 二、具体功能")]),_._v(" "),v("h3",{attrs:{id:"_2-1-查找"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-查找"}},[_._v("#")]),_._v(" 2.1 查找")]),_._v(" "),v("p",[_._v("查找：查找是计算机中最基本也是最有用的算法之一，它描述了在有序集合中搜索特定值的过程。")]),_._v(" "),v("h3",{attrs:{id:"_2-2-排序"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-排序"}},[_._v("#")]),_._v(" 2.2 排序")]),_._v(" "),v("p",[_._v("排序： 排序是最基础并且也是很重要的算法思想。")]),_._v(" "),v("h2",{attrs:{id:"三、解题思路-个人想法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#三、解题思路-个人想法"}},[_._v("#")]),_._v(" 三、解题思路 (个人想法)")]),_._v(" "),v("ol",[v("li",[_._v("先将问题抽象, 用合适的数据结构展示问题；")]),_._v(" "),v("li",[_._v("寻求解题思路, 来操作数据结构, 以求问题的解；")]),_._v(" "),v("li",[_._v("借鉴成功的思路, 使用其它方式解决问题; 这对于练习上述算法大有帮助。")])]),_._v(" "),v("h3",{attrs:{id:"目前的问题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#目前的问题"}},[_._v("#")]),_._v(" 目前的问题")]),_._v(" "),v("p",[_._v("怎么将我认为的特殊值纳入一般情况，就是不需要对其单独讨论")])])}),[],!1,null,null,null);v.default=s.exports}}]);